version: 2.1
## The config file will go through multiple iterations as part of the demo to show case how the project is 
##  built and how it would be taken through various phases of build, test, smoke test and deploy. 
## iteration-1 build front-end and back-end
## iteration-2 test front-end and back-end
## iteration-3 analyse front-end and back-end; generate necessary alerts on email.
## iteration-4 generate alerts using slack
## iteration-5 deploy infrastructure and simulate failure
## iteration-6 deploy infrastructure successfully
## iteration-7 provide status of migration even on kvdb.io to retrieve it 
# recreate resources

orbs:
  slack: circleci/slack@4.10.1


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given workflow ID.
    parameters:
      workflow_id:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
             echo "Destroying environment: << parameters.workflow_id >> "
             aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
             aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>> 
             aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
        
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string         
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -k https://kvdb.io/6h9wPbrfcMHffrSixfsDx2/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install tar and gzip
          command: |
              yum -y install tar 
              yum -y install gzip
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            echo `cat .circleci/ansible/inventory.txt`  
      - persist_to_workspace:
          root: ~/
          paths:
          - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - slack/notify:
          event: fail
          template: basic_fail_1

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1d:71:0c:64:42:0f:cb:51:ac:c6:e4:6f:c3:1a:ae:47"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl && \
            pip install awscli
      - run:
          name: Install ansible
          command: |
            apk add --update ansible                           
      - run:
          name: Configure server
          command: |
             echo ENVIRONMENT=production > backend/.env
             echo TYPEORM_CONNECTION=postgres >> backend/.env
             echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
             echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
             echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend/.env
             echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
             echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
             echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
             echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
             echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env" 
             cat backend/.env
             cd .circleci/ansible
             ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"        
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - slack/notify:
          event: fail
          template: basic_fail_1

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install 
            npm run build
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt

      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/6h9wPbrfcMHffrSixfsDx2/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              else
              echo "Failure"
              curl -k -d '0' https://kvdb.io/6h9wPbrfcMHffrSixfsDx2/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-frontend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: "Install dependencies"
          command: |
            apk add --update tar gzip ansible nodejs npm curl && \
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env                
      - run:
          name: Deploy frontend objects
          command: |
            #!/bin/bash -eo pipefail
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"        
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1d:71:0c:64:42:0f:cb:51:ac:c6:e4:6f:c3:1a:ae:47"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar unzip gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            # echo ENVIRONMENT=production >> .env
            # echo TYPEORM_CONNECTION=postgres >> .env
            # echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            # echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            # echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            # echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            # echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            # cat backend/.env
            
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            pwd
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is --"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - slack/notify:
          event: fail
          template: basic_fail_1

  smoke-test:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout 
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt install curl
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --region us-east-1 \
              --output text )
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo ${API_URL}
            if curl ${API_URL}/api/status | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          event: fail
          template: basic_fail_1

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar 
            yum -y install gzip
      - run:
          name: Update cloudfront distribution
          command: |
            
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

            echo workflow id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar 
            yum -y install gzip
      - run:
          name: Get old id and Remove old stacks and files
          command: |
            export OldWorkflowId=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"  

            if [[ "${OldWorkflowId}" =~ "${STACKS[@]}"  ]]
            then
              echo "Cleaning in progress"
              echo old workflow id: "${OldWorkflowId}"
              echo current workflow id: "${CIRCLE_WORKFLOW_ID:0:7}"
              aws s3 rm "s3://udapeople-${OldWorkflowId}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowId}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowId}"
              echo "Cleaning Done"
            else
              echo "No cleanup required---"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]          